; automatically switch to lisp-mode for given files
(setq auto-mode-alist (cons '("dot-emacs" . lisp-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("emacs-custom" . lisp-mode) auto-mode-alist))

; dinamically add to load-path all folders from emacs-lib-folder
;; (setq emacs-lib-folder "~/.emacs.d")
;; (add-to-list 'load-path emacs-lib-folder)
;; (progn (cd emacs-lib-folder) (normal-top-level-add-subdirs-to-load-path))

; dinamically add to load-path all folders from emacs-lib-folder
;; (setq emacs-lib-folder "~/.emacs-mine")
;; (add-to-list 'load-path emacs-lib-folder)
;; (progn
;;   (cd emacs-lib-folder)
;;   (normal-top-level-add-subdirs-to-load-path))


; Misc settings
(transient-mark-mode t)
(show-paren-mode t)
(column-number-mode t)
(setq scroll-step 1)
(tool-bar-mode -1)
(delete-selection-mode -1)
(setq inhibit-splash-screen -1)
(cua-selection-mode t)
(setq-default indent-tabs-mode -1)
(visual-line-mode t)
(scroll-bar-mode -1)

;; show trailing whitespaces is some programming modes : -is this really working?
(mapc (lambda (hook)
        (add-hook hook (lambda ()
                         (setq show-trailing-whitespace t))))
      '(text-mode-hook
        c-mode-hook
        emacs-lisp-mode-hook
        lisp-mode-hook
        java-mode-hook
        python-mode-hook
        shell-script-mode-hook))

(global-set-key [(meta /)] 'dabbrev-expand)
(global-set-key [(control /)] 'hippie-expand)

; Shortening of often used commands
(defalias 'gf 'grep-find)
(defalias 'fd 'find-dired)
(defalias 'sh 'shell)

(defalias 'qrr 'query-replace-regexp)
(defalias 'lml 'list-matching-lines)
(defalias 'dml 'delete-matching-lines)
(defalias 'rof 'recentf-open-files)

(defalias 'eb 'eval-buffer)
(defalias 'er 'eval-region)

(defalias 'hr 'highlight-regexp)
(defalias 'ur 'unhighlight-regexp)

(defalias 'dtw 'delete-trailing-whitespace)

; Enable linum mode
(linum-mode t)

;; Don't make backup files next to the source, put them in a single place
(setq backup-directory-alist
      (quote (("." . "~/.emacs-backups"))))

;; Enable minor modes
(ido-mode t)

;; Python mode combined with outline minor mode:
(add-hook 'python-mode-hook
          (lambda ()
            (setq show-trailing-whitespace t)
            (outline-minor-mode t)
            (auto-fill-mode t)
            (setq coding-system-for-write 'utf-8)
            ))


; Javascript mode
(autoload #'espresso-mode "espresso" "Start espresso-mode" t)
(add-to-list 'auto-mode-alist '("\\.js$" . espresso-mode))
(add-to-list 'auto-mode-alist '("\\.json$" . espresso-mode))

; move selected text up/down
(defun move-text-internal (arg)
   (cond
    ((and mark-active transient-mark-mode)
     (if (> (point) (mark))
        (exchange-point-and-mark))
     (let ((column (current-column))
          (text (delete-and-extract-region (point) (mark))))
       (forward-line arg)
       (move-to-column column t)
       (set-mark (point))
       (insert text)
       (exchange-point-and-mark)
       (setq deactivate-mark nil)))
    (t
     (beginning-of-line)
     (when (or (> arg 0) (not (bobp)))
       (forward-line)
       (when (or (< arg 0) (not (eobp)))
        (transpose-lines arg))
       (forward-line -1)))))

(defun move-text-down (arg)
   "Move region (transient-mark-mode active) or current line
  arg lines down."
   (interactive "*p")
   (move-text-internal arg))

(defun move-text-up (arg)
   "Move region (transient-mark-mode active) or current line
  arg lines up."
   (interactive "*p")
   (move-text-internal (- arg)))

(global-set-key (quote [M-up]) 'move-text-up)
(global-set-key (quote [M-down]) 'move-text-down)

(defun revert-all-buffers ()
  "Refreshes all open buffers from their respective files"
  (interactive)
  (let* ((list (buffer-list))
         (buffer (car list)))
    (while buffer
      (when (buffer-file-name buffer)
        (progn
          (set-buffer buffer)
          (revert-buffer t t t)))
      (setq list (cdr list))
      (setq buffer (car list))))
  (message "Refreshing open files"))

; enable ipython
;; (setq python-python-command "ipython")
;; (setq python-python-command-args '("-cl" "-colors" "Linux"))
;; (setq ipython-completion-command-string "print(';'.join(__IP.Completer.all_completions('%s')))\n")

;; (when (locate-library "ipython")
;;   (require 'ipython)
;;   (setq py-python-command-args '("-colors" "Linux")))


;; -----------------------------------------------------------------------------


;; Custom functions/hooks for persisting/loading frame geometry upon save/load
(defun save-frameg ()
  "Gets the current frame's geometry and saves to ~/.emacs.frameg."
  (let ((frameg-font (frame-parameter (selected-frame) 'font))
        (frameg-left (frame-parameter (selected-frame) 'left))
        (frameg-top (frame-parameter (selected-frame) 'top))
        (frameg-width (frame-parameter (selected-frame) 'width))
        (frameg-height (frame-parameter (selected-frame) 'height))
        (frameg-file (expand-file-name "~/.emacs.frameg")))
    (with-temp-buffer
      ;; Turn off backup for this file
      (make-local-variable 'make-backup-files)
      (setq make-backup-files nil)
      (insert
       ";;; This file stores the previous emacs frame's geometry.\n"
       ";;; Last generated " (current-time-string) ".\n"
       "(setq initial-frame-alist\n"
       "      '((font . \"" frameg-font "\")\n"
       (format "        (top . %d)\n" (max frameg-top 0))
       (format "        (left . %d)\n" (max frameg-left 0))
       (format "        (width . %d)\n" (max frameg-width 0))
       (format "        (height . %d)))\n" (max frameg-height 0)))
      (when (file-writable-p frameg-file)
        (write-file frameg-file)))))

(defun load-frameg ()
  "Loads ~/.emacs.frameg which should load the previous frame's geometry."
  (let ((frameg-file (expand-file-name "~/.emacs.frameg")))
    (when (file-readable-p frameg-file)
      (load-file frameg-file))))

;; Special work to do ONLY when there is a window system being used
(if window-system
    (progn
      (add-hook 'after-init-hook 'load-frameg)
      (add-hook 'kill-emacs-hook 'save-frameg)))